<<PackageHeader(multirobot_map_merge)>>

<<GitHubIssues(hrnr/m-explore)>>

<<TOC(4)>>

== Overview ==
This package provides global map for multiple robots. It can merge maps from arbitrary number of robots. It expects maps from individual robots as ROS topics. If your run multiple robots under the same ROS master then {{{multirobot_map_merge}}} will probably work for you out-of-the-box. It is also very easy to setup an simulation experiment.

If your run your robots under multiple ROS masters you need to run your own way of communication between robots and provide maps from robots on local topics (under the same master). Also if you want to distribute merged map back to robots your communication must take care of it.

{{{multirobot_map_merge}}} does not depend on any particular communication between robots.

== Architecture ==

{{{multirobot_map_merge}}} finds robot maps dynamically and new robots can be added to system at any time.

{{attachment:architecture.svg||width="755px"}}

To make this dynamic behaviour possible there are some constrains placed on robots. First all robots must publish map under `<robot_namespace>/map`, where topic name (`map`) is configurable, but must be same for all robots. For each robot `<robot_namespace>` will be of cause different.

Currently map merging algorithm supports only merging maps with known initial positions of the robots. Therefore you need to provide initial position for each robot. You need to provide set of `<robot_namespace>/map_merge/init_pose` parameters. These positions should be in `world_frame`. See [[#ROS API]].

Another merging algorithm which don't require known initial positions may be added in the future. Then those parameters will be optional.

== ROS API ==
{{{
#!clearsilver CS/NodeAPI

name = map_merge
desc = Provides map merging services offered by this package. Dynamically looks for new robots in the system and merges their maps.

pub {
  0.name  = map
  0.type = nav_msgs/OccupancyGrid
  0.desc = Merged map from all robots in the system.
}
sub {
  0.name = <robot_namespace>/map
  0.type = nav_msgs/OccupancyGrid
  0.desc = Local map for specific robot. 
}

param {
  0.name = <robot_namespace>/map_merge/init_pose_x
  0.default = `<no_default>`
  0.type = double
  0.desc = `x` coordinate of robot initial position in `world_frame`. Should be in meters. It does not matter which frame you will consider global (preferably it should be different from all robots frames), but relative positions of robots in this frame must be correct.

  1.name = <robot_namespace>/map_merge/init_pose_y
  1.default = `<no_default>`
  1.type = double
  1.desc = `y` coordinate of robot initial position in `world_frame`.

  2.name = <robot_namespace>/map_merge/init_pose_z
  2.default = `<no_default>`
  2.type = double
  2.desc = `z` coordinate of robot initial position in `world_frame`.

  3.name = <robot_namespace>/map_merge/init_pose_yaw
  3.default = `<no_default>`
  3.type = double
  3.desc = `yaw` component of robot initial position in `world_frame`. Represents robot rotation in radians.

  4.name = ~robot_map_topic
  4.default = `map`
  4.type = string
  4.desc = Name of robot map topic without namespaces (last component of topic name). Only topics with this name will be considered when looking for new maps to merge. This topics may be subject to further filtering (see below).

  5.name = ~robot_namespace
  5.default = `` (empty string)
  5.type = string
  5.desc = Fixed part of robot map topic. You can employ this parameter to further limit which topics will be considered during dynamic lookup for robots. Only topics which contain (anywhere) this string will be considered for lookup. Unlike `robot_map_topic` you are not limited by namespace logic. Topics will be filtered using text-based search. Therefore `robot_namespace` does not need to be ROS namespace, but can contain slashes etc. This must be common part of all robots map topics name (all robots for which you want to merge map).

  6.name = ~merged_map_topic
  6.default = `map`
  6.type = string
  6.desc = Topic name where merged map will be published.

  7.name = ~world_frame
  7.default = `world`
  7.type = string
  7.desc = Frame id (in [[tf]] tree) which will be assigned to published merged map. This should be frame where you specified robot initial positions.

  8.name = ~merging_rate
  8.default = `4.0`
  8.type = double
  8.desc = Rate in Hz. Basic frequency on which this node discovers new robots, merges their maps and publish merged map. Increase this value if you want faster updates.
}
}}}

== Acknowledgements ==

Idea for dynamic robot discovery is from `map_merging` package from Zhi Yan. Merging algorithm and configuration are different.

## AUTOGENERATED DON'T DELETE
## CategoryPackage
