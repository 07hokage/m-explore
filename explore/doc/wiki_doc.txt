<<PackageHeader(explore_lite)>>

<<GitHubIssues(hrnr/m-explore)>>

<<TOC(4)>>

== Overview ==
This package provides greedy frontier-based exploration. When node is running, robot will greedily explore its enviroment until no frontiers could be found. Movement commands will be send to [[move_base]].

Unlike similar packages, {{{explore_lite}}} does not create it's own costmap. Node subscribes to <<MsgLink(nav_msgs/OccupancyGrid)>> messages. Commands for robot movement are send to [[move_base]] node.

== Architecture ==
{{{explore_lite}}} uses [[move_base]] for navigation. You need to run properly configured [[move_base]] node.

{{attachment:architecture.svg||width="755px"}}

{{{explore_lite}}} subscribes to a <<MsgLink(nav_msgs/OccupancyGrid)>> and <<MsgLink(map_msgs/OccupancyGridUpdate)>> messages to construct a map where it looks for frontiers. You can either use costmap published by [[move_base]] (ie. `<move_base>/global_costmap/costmap`) or you can use map constructed by mapping algorithm (SLAM). Better results were achieved on maps constructed by SLAM as they usually contain less noise.

Currently {{{explore_lite}}} also requires footprint information. Footprint is published by [[move_base]] `move_base/global_costmap/footprint`. You can specify different footprint topic, but that should not be necassary. Default works for both circular and non-circular robots depending on [[move_base]] configuration.

== ROS API ==
{{{
#!clearsilver CS/NodeAPI

name = explore
desc = Provides exploration services offered by this package. Exploration will start immediately after node initialization.

pub {
  0.name  = ~frontiers
  0.type = visualization_msgs/MarkerArray
  0.desc = Visualization of frontiers considered by exploring algorithm. Each frontier is visualized as vector in the middle of frontier pointing towards unknown area.
}
sub {
  0.name = costmap
  0.type = nav_msgs/OccupancyGrid
  0.desc = Map which will be used for exploration planning. Can be either cost from [[move_base]] or map created by SLAM (see above).

  1.name = costmap_updates
  1.type = map_msgs/OccupancyGridUpdate
  1.desc = Incremental updates on costmap. Not necessary if source of map is always publishing full updates, i.e. does not provide this topic.

  2.name = footprint_stamped
  2.type = geometry_msgs/PolygonStamped
  2.desc = Robot footprints updates. Usualy provided by [[move_base]] (see above).
}

param {
  0.name = ~visualize
  0.default = `false`
  0.type = bool
  0.desc = Specifies whether or not publish visualized frontiers.

  1.name = ~costmap_topic
  1.default = `costmap`
  1.type = string
  1.desc = Specifies topic of source <<MsgLink(nav_msgs/OccupancyGrid)>>. Mandatory.

  2.name = ~footprint_topic
  2.default = `footprint_stamped`
  2.type = string
  2.desc = Specifies topic of source <<MsgLink(geometry_msgs/PolygonStamped)>> representing robot foot print. Usualy provided by [[move_base]] (see above). Mandatory.

  3.name = ~costmap_updates_topic
  3.default = `costmap_updates`
  3.type = string
  3.desc = Specifies topic of source <<MsgLink(map_msgs/OccupancyGridUpdate)>>. Not necessary if source of map is always publishing full updates, i.e. does not provide this topic.

  4.name = ~planner_frequency
  4.default = `1.0`
  4.type = double
  4.desc = Rate in Hz at which new frontiers will computed and goal reconsidered.

  5.name = ~progress_timeout
  5.default = `30.0`
  5.type = double
  5.desc = Time in seconds. When robot do not make any progress for `progress_timeout`, current goal will be abandoned.

  6.name = ~potential_scale
  6.default = `1e-3`
  6.type = double
  6.desc = Used for weighting frontiers. This multiplicative parameter affects frontier potential component of the frontier weight.

  7.name = ~orientation_scale
  7.default = `0`
  7.type = double
  7.desc = Used for weighting frontiers. This multiplicative parameter affects frontier orientation component of the frontier weight.

  8.name = ~gain_scale
  8.default = `1.0`
  8.type = double
  8.desc = Used for weighting frontiers. This multiplicative parameter affects frontier gain component of the frontier weight.

  9.name = ~transform_tolerance
  9.default = `0.3`
  9.type = double
  9.desc = Transform tolerance to use when transforming robot pose.
}

req_tf {
  0.from = global_frame
  0.to = robot_base_frame
  0.desc = This transformation is usually provided by mapping algorithm. Those frames are usually called `map` and `base_link`.
}

act_called {
  0.name = move_base
  0.type = move_base_msgs/MoveBaseAction
  0.desc = [[move_base]] actionlib API for posting goals. See [[move_base#Action API]] for details. This expects [[move_base]] node in the same namespace as `explore_lite`, you may want to remap this node if this is not true.
}
}}}

## AUTOGENERATED DON'T DELETE
## CategoryPackage